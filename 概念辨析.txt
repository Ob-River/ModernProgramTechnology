演绎用三段论：水果有营养成分、用途、口感等特点（先知大前提），西瓜有这些特点（后知小前提），西瓜是水果（结论）。
这些共同特点是提炼抽象出来的知识——类，水果的具体化就是对象——西瓜。西瓜是水果的一个实例。
一个对象有多个属性。属性a，营养成分；属性b，用途；属性c，口感。属性c的属性值就可以是口感的评分，85/100。
先摸内存条，上面有许多内存颗粒。（有两片内存颗粒。大片的最多的，就是你可以改变的。小的，少的这片的内存颗粒们上是驱动。）
存储数据，我们要记住数据存在了哪个内存颗粒上。从0到100编完号。
这样你拥有了从0到100号的密码箱。有100把钥匙，是的，都存在0号密码箱（这个密码箱没锁）。
现在你把攒的一元钱想放进一号密码箱。先在零号密码箱找到一号密码箱的钥匙再…
把一元人民币当成数据类型。把一块美元当成另一个数据类型。就像不能简单的相加人民币和美元，你也不能冒然相加不同数据类型。
DOM
DOM （Document Object Model，文档对象模型）是一个跨平台的、独立于编程语言的API，它把HTML、XHTML或、XML文档当作一个树结构，而每个节点视为一个对象，这些对象可以被编程语言操作，进而改变文档的结构，映射到文档的显示。
把流水账似的一长串网页源代码中的节点全部视为一个个的对象，然后这些对象依照层级关系结构化形成一棵树——DOM树，方便编程语言操作。有了对象，编程就方便了，只要一层层拿到对象就可以优雅地改变对象的属性进而动态地改变HTML等文档的展示。
HTML中的节点
根节点：<html>元素
元素节点：所有HTML元素，比如body、title
属性节点：所有HTML属性，比如align、id
文本节点：插入到HTML元素中的文本，比如<a>text</a>
注释节点：HTML文档中的注释，比如<!--notes-->
HTML中的对象：文档对象，元素对象，属性对象，事件对象。
网页加载过程
Web浏览器使用一个类似于DOM的内部模型来渲染HTML页面。网页加载过程是这样的：浏览器先将HTML下载到本地内存，然后自动解析成DOM树并展示页面到屏幕。而DOM暴露出来的API方便了JavaScript等网络编程语言进行动态的修改。
。 。 
XML和JSON
1.XML介绍
XML 指可扩展标记语言（EXtensible Markup Language）
XML 是一种标记语言，很类似 HTML
XML 的设计宗旨是传输数据，而非显示数据
XML 标签没有被预定义。您需要自行定义标签。
XML 被设计为具有自我描述性。
XML 是 W3C 的推荐标准。
2.JSON介绍
JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。 易于人阅读和编写。同时也易于机器解析和生成。  JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C, C++, C#, Java, JavaScript, Perl, Python等）。 这些特性使JSON成为理想的数据交换语言。
3.XML和JSON优缺点
(1).XML的优缺点
XML的优点:
格式统一，符合标准；
容易与其他系统进行远程交互，数据共享比较方便。
XML的缺点:
XML文件庞大，文件格式复杂，传输占带宽；
服务器端和客户端都需要花费大量代码来解析XML，导致服务器端和客户端代码变得异常复杂且不易维护；
客户端不同浏览器之间解析XML的方式不一致，需要重复编写很多代码；
服务器端和客户端解析XML花费较多的资源和时间。
(2).JSON优点：数据格式比较简单，易于读写，格式都是压缩的，占用带宽小；
易于解析，客户端JavaScript可以简单的通过eval()进行JSON数据的读取；
支持多种语言，包括ActionScript, C, C#, ColdFusion, Java, JavaScript, Perl, PHP, Python, Ruby等服务器端语言，便于服务器端的解析；
在PHP世界，已经有PHP-JSON和JSON-PHP出现了，偏于PHP序列化后的程序直接调用，PHP服务器端的对象、数组等能直接生成JSON格式，便于客户端的访问提取；
因为JSON格式能直接为服务器端代码使用，大大简化了服务器端和客户端的代码开发量，且完成任务不变，并且易于维护。
4.XML和JSON的优缺点对比
(1).可读性方面。
JSON和XML的数据可读性基本相同，JSON和XML的可读性可谓不相上下，一边是建议的语法，一边是规范的标签形式，XML可读性较好些。
(2).可扩展性方面。
XML天生有很好的扩展性，JSON当然也有
(3).编码难度方面。
都有丰富的编码工具。JSON的编码明显比XML容易许多，即使不借助工具也能写出JSON的代码，可是要写好XML就不太容易了。
(4).解码难度方面。
XML的解析得考虑子节点父节点，让人头昏眼花，而JSON的解析难度几乎为0。这一点XML输得真是没话说。
(5).使用人数方面。
当前JSON在流行度方面已经远远超过XML。
(6).解析手段方面。
JSON和XML同样拥有丰富的解析手段。
(7).数据体积方面。
JSON相对于XML来讲，数据的体积小，传递的速度更快些。
(8).数据交互方面。
JSON与JavaScript的交互更加方便，更容易解析处理，更好的数据交互。
(9).数据描述方面。
JSON对数据的描述性比XML较差。
(10).传输速度方面。
JSON的速度要远远快于XML。
5.XML与JSON数据格式比较
(1).关于轻量级和重量级
轻量级和重量级是相对来说的，那么XML相对于JSON的重量级体现在哪呢?应该体现在解析上，XML目前设计了两种解析方式：DOM和 SAX。
<1>.DOM
DOM是把一个数据交换格式XML看成一个DOM对象，需要把XML文件整个读入内存，这一点上JSON和XML的原理是一样的，但是XML要考虑父节点和子节点，这一点上JSON的解析难度要小很多，因为JSON构建于两种结构：key/value，键值对的集合;值的有序集合，可理解为数组；
<2>.SAX
SAX不需要整个读入文档就可以对解析出的内容进行处理，是一种逐步解析的方法。程序也可以随时终止解析。这样，一个大的文档就可以逐步的、一点一点的展现出来，所以SAX适合于大规模的解析。这一点，JSON目前是做不到得。
所以，JSON和XML的轻/重量级的区别在于：
JSON只提供整体解析方案，而这种方法只在解析较少的数据时才能起到良好的效果；
XML提供了对大规模数据的逐步解析方案，这种方案很适合于对大量数据的处理。
(2).关于数据格式编码及解析难度
<1>.在编码方面。
虽然XML和JSON都有各自的编码工具，但是JSON的编码要比XML简单，即使不借助工具，也可以写出JSON代码，但要写出好的XML代码就有点困难;与XML一样，JSON也是基于文本的，且它们都使用Unicode编码，且其与数据交换格式XML一样具有可读性。
主观上来看，JSON更为清晰且冗余更少些。JSON网站提供了对JSON语法的严格描述，只是描述较简短。从总体来看，XML比较适合于标记文档，而JSON却更适于进行数据交换处理。
<2>.在解析方面。
在普通的web应用领域，开发者经常为XML的解析伤脑筋，无论是服务器端生成或处理XML，还是客户端用 JavaScript 解析XML，都常常导致复杂的代码，极低的开发效率。
实际上，对于大多数Web应用来说，他们根本不需要复杂的XML来传输数据，XML宣称的扩展性在此就很少具有优势,许多Ajax应用甚至直接返回HTML片段来构建动态Web页面。和返回XML并解析它相比，返回HTML片段大大降低了系统的复杂性，但同时缺少了一定的灵活性。同XML或 HTML片段相比，数据交换格式JSON 提供了更好的简单性和灵活性。
(3).实例比较
XML和JSON都使用结构化方法来标记数据，下面来做一个简单的比较。
<1>.用XML表示中国部分省市数据如下：
<?xml version="1.0" encoding="utf-8" ?>
<country>
  <name>中国</name>
  <province>
    <name>黑龙江</name>
    <citys>
      <city>哈尔滨</city>
      <city>大庆</city>
    </citys>  　　
  </province>
</country>
<2>.用JSON表示中国部分省市数据如下：
 var country =
        {
            name: "中国",
            provinces: [
            { name: "黑龙江", citys: { city: ["哈尔滨", "大庆"]} },
            ]
        }
编码的可读性来说，XML有明显的优势，毕竟人类的语言更贴近这样的说明结构。JSON读起来更像一个数据块，读起来就比较费解了。不过，我们读起来费解的语言，恰恰是适合机器阅读，所以通过JSON的索引country.provinces[0].name就能够读取“黑龙江”这个值。
编码的手写难度来说，XML还是舒服一些，好读当然就好写。不过写出来的字符JSON就明显少很多。去掉空白制表以及换行的话，JSON就是密密麻麻的有用数据，而XML却包含很多重复的标记字符。
。 。 
先return回车/n，后newline换行/r，浓缩为Enter键。
在windows中，用/r/n作为另起一行的标识，即CRLF
在Linux中，用/r，即CR
。 。 
Unix 系统被发明之后，大家用得很爽。但是后来开始收费和闭源了。一个叫 RMS 的大叔觉得很不爽，于是发起 GNU 计划，模仿 Unix 的界面和使用方式，从头做一个开源的版本。
GNU 是一个计划或者叫行动。在这个旗帜下成立了 FSF，起草了 GPL。
接下来大家纷纷在 GNU 计划下做了很多的工作和项目，基本实现了当初的计划。包括核心的 gcc 和 glibc。但是 GNU 系统缺少操作系统内核。那时， BSD陷入版权纠纷，x86（32位） 平台开发暂停，一个叫 Linus 的同学为了在 x86 平台（PC）上运行 Unix，开发 Linux，一个系统内核。于是合在一起打包发布叫 GNU / Linux。然后大家念着念着省掉了前面部分，变成了 Linux 系统。实际上 Debian，RedHat 等 Linux 发行版中Linux占比不多。
使用BSD版权协议源代码的程序可开源，也可以不开源。基此，基于Unix有了BSD开源操作系统，流行的有freeBSD。使用GPL版权协议源代码的程序开源。基此，Linux开源操作系统，流行的有Ubuntu Linux，等。
线路线材：要求高成本高，或要求低成本低，或要求高成本低，通信线路分为三级。内部通信线路多要求高成本高，外部通信线路不拘。
软件协议硬件接口。
原理类型：
运行频率：
通俗的介绍一下SDH技术？可以复制。?
​
www.zhihu.com
图标
互联网在本质上和交通规划是共通的。试想一下，你有一个包裹，要如何通过网络投递给远方的人？ 要有道路(link)，要有通信地址(network)，要有运输卡车(transfer)，要有投递员(application)，满足这四点就可以通信了，这就是tcp/ip模型
分别来看，道路上常常发生什么呢？就是堵车(congestion)，如何减少堵车？
1 限行(token)，一周只能开一次，适合没什么急事的闲人
2 避开高峰(csma/cd) 可以每天开，只是高峰期禁开，适合加班狗通宵狗
3 拆迁(proxy) 把厂房和工人都赶到郊区去，再建一座新城，没事打死也不进城，适合制造业
4 VIP通道(VPN) 把道路戒严，无关人员退散，就我一个人，可以开得随心所欲
5 修续航设施，如加油站(relay)，高速服务点(switch)等，保证车辆能不断向前行驶，而不是坏掉了堵在路上
6 扩建道路（ x.25 atm），划分车道(wdm)
7 搭顺风车(CDMA) 保证出行需求的前提下减少车辆
通信地址方面我们常常会有那些让人抓狂呢？主要有走错路，收件人重名，小区物业不让进(防火墙)
那么如何不走错路？
1 小城市要选最短的路走(rip)，小城市车少，这样走快
2 大城市要选最宽的的路走(ospf)，这样走不堵，大城市车多，要是堵胡同里就出不来了
3 超大城市之间要交换地图(bgp)，这样不会迷路，许多人工作很久也接触不到，看不懂可以略过
4 一般16个路由器(router)以下，算小城市
怎么解决重名？
1 划分省市区县街道(subnet mask)，减少重名概率
2 为街道上的每户贴上地址标签(内网IP)，避免重名
小区保安不让进怎么办？
1 买通保安(acl) 让保安喜欢上你，以后就能进了
2 让保安喊一下快递来了(ARP) 大家都来认领，缺点是容易被人冒领
3 让保安帮你送(PDM) 有钱任性
运输卡车会有些什么问题呢？翻车，快递被偷，快递被调包，被偷看，太多爆仓
1 翻车怎么办？自然是重发(tcp)，类似短信，只要看不到对方回复"收到"二字(ACK)，你就会一直重发(SYN)
2 快递被偷吃怎么办？当场验货拒收(奇偶校验，crc)
3 被调包怎么办？那我寄件的时候写个飘逸的签名吧。有人胆敢拆封，签名就被撕毁了(hash，digital signature)
4 被偷看怎么办？ 在快递上加个锁(RSA,3DES,Caesar)
5 经常爆仓？按照仙女们的败家频率重新装仓，天天败家的快件放在最外面，她随时能取走；一年也不买几次的放在最里，如果来取，我大不了慢慢寻找(Huffman)
6 卡车的最大速度与什么有关？路越宽，红绿灯越少，社会车辆越少，车速越快，这就到香农定理了。
广域网传输：广域网并不等同于互联网。互联网是公共型的广域网，也是最大的广域网了，公共型的广域网的成本会较低，为一种较便宜的网络环境，但跟广域网比较来说，是没办法管理带宽，走公共型网络系统，任何一段的带宽都无法被保证。
当然，也有对应于专用型的广网，成本上就会比较为昂贵。因为由ISP业者用于将企业间做连接的电话线或光纤等发送媒介是ISP业者预先埋在马路下的线路，因为工程浩大，维修不易，而且带宽是可以被保证的，所以在成本上就会比较为昂贵。
光纤传输：MPLS-TP。OTN。
接入网就是把个人家庭、工厂公司、机构组织连接到网络上来，俗称的最后一公里技术，比如拨号网络/ISDN/ADSL/EPON/GPON。接入网意味着需要铺设很多电缆/光纤/网线，此时将大容量的光纤拉到小区，然后再用光纤分路器分成一束束拉到用户家，这样节省成本。这项技术就是FTTX，以EPON为例，EPON里面包括局段设备 OLT，用户侧设备ONU（光猫）。用户的上行流量由OLT控制，采用类似TDM（Time Division Multiplex）的调度机制，用户的下行流量采用由OLT广播的方式，对流量不感兴趣的OUN则丢弃，对流量感兴趣的ONU则接收。